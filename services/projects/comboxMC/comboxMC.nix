{ pkgs, lib, ... }:

{  
  virtualisation.oci-containers.containers."comboxMC" = {
    image = "docker.io/library/eclipse-temurin:21";
    volumes = [
      "/home/server/data/services/datas/combox-space/game-servers/mc-1_21_5-private/mc:/data:rw"
    ];
    ports = [
      "25565:25565/tcp"
      "25575:25575/tcp"
    ];
    cmd = [ "/bin/sh" "/data/start.sh" ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=comboxMC"
      "--network=containers_default"
    ];
  };
  systemd.services."podman-comboxMC" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-containers_default.service"
    ];
    requires = [
      "podman-network-containers_default.service"
    ];
    partOf = [
      "podman-compose-containers-root.target"
    ];
    wantedBy = [
      "podman-compose-containers-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-containers_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f containers_default";
    };
    script = ''
      podman network inspect containers_default || podman network create containers_default
    '';
    partOf = [ "podman-compose-containers-root.target" ];
    wantedBy = [ "podman-compose-containers-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-containers-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
